require 'rails_helper'
require 'devise/jwt/test_helpers'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TodosController, type: :controller do
  describe 'GET /users/:user_id/todos' do
    let!(:todos) { create_list(:todo, 10) }
    let(:todo_id) { articles.first.id }
    # make HTTP get request before each example
    headerss = { 'Accept'=>'application/json', 'Content-Type' => 'application/json' }
    # This will add a valid token for `user` in the `Authorization` header
    let(:auth_headers) { Devise::JWT::TestHelpers.auth_headers(headerss, todos.first.user)}
    before { request.headers.merge! auth_headers }

    before { get :index, params: { user_id: todos.first.user.id.to_s } }

    it 'returns articles' do
      # Note `json` is a custom helper to parse JSON responses
      result = JSON(response.body)

      expect(result).not_to be_empty
      expect(result.size).to eq(Todo.where(user_id: todos.first.user.id).size)
    end

    it 'returns status code 401' do
      expect(response).to have_http_status(200)
    end
  end
end
